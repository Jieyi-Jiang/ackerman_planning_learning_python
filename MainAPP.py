import os

from numpy import dtype

# from mian_window import Ui_MainWindow
import sys
import cv2
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QLabel,
                             QPushButton, QVBoxLayout, QHBoxLayout,
                             QFileDialog, QScrollArea)
from PyQt5.QtGui import QPixmap, QImage, QPainter, QColor
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5 import QtCore, QtGui, QtWidgets

import cv2
import matplotlib.pyplot as plt
import heapq
from scipy import sparse
import osqp
import time

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\mian_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 740)
        MainWindow.setMinimumSize(QtCore.QSize(1100, 740))
        MainWindow.setMaximumSize(QtCore.QSize(1100, 740))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 1085, 691))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.function_select_tab = QtWidgets.QTabWidget(self.horizontalLayoutWidget)
        self.function_select_tab.setMinimumSize(QtCore.QSize(273, 600))
        self.function_select_tab.setMaximumSize(QtCore.QSize(273, 700))
        self.function_select_tab.setObjectName("function_select_tab")
        self.function_select_tab_1 = QtWidgets.QWidget()
        self.function_select_tab_1.setObjectName("function_select_tab_1")
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.function_select_tab_1)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(0, 0, 261, 521))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.group_import = QtWidgets.QGroupBox(self.verticalLayoutWidget_7)
        self.group_import.setEnabled(True)
        self.group_import.setMinimumSize(QtCore.QSize(0, 150))
        self.group_import.setMaximumSize(QtCore.QSize(16777215, 150))
        self.group_import.setAlignment(QtCore.Qt.AlignCenter)
        self.group_import.setFlat(True)
        self.group_import.setCheckable(False)
        self.group_import.setObjectName("group_import")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.group_import)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 241, 111))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.btn_import_image = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.btn_import_image.setObjectName("btn_import_image")
        self.verticalLayout_3.addWidget(self.btn_import_image)
        self.image_detail_text_box = QtWidgets.QTextBrowser(self.verticalLayoutWidget_3)
        self.image_detail_text_box.setMaximumSize(QtCore.QSize(400, 80))
        self.image_detail_text_box.setOverwriteMode(True)
        self.image_detail_text_box.setObjectName("image_detail_text_box")
        self.verticalLayout_3.addWidget(self.image_detail_text_box)
        self.verticalLayout_7.addWidget(self.group_import)
        self.groupBox = QtWidgets.QGroupBox(self.verticalLayoutWidget_7)
        self.groupBox.setMinimumSize(QtCore.QSize(0, 250))
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setFlat(True)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(9, 19, 241, 221))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btn_image_process = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btn_image_process.setObjectName("btn_image_process")
        self.verticalLayout.addWidget(self.btn_image_process)
        self.group_image_process_option = QtWidgets.QGroupBox(self.verticalLayoutWidget)
        self.group_image_process_option.setMaximumSize(QtCore.QSize(16777215, 80))
        self.group_image_process_option.setObjectName("group_image_process_option")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.group_image_process_option)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(9, 19, 221, 51))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.btn_gray = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.btn_gray.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_gray.setObjectName("btn_gray")
        self.verticalLayout_2.addWidget(self.btn_gray)
        self.btn_binary = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.btn_binary.setObjectName("btn_binary")
        self.verticalLayout_2.addWidget(self.btn_binary)
        self.verticalLayout.addWidget(self.group_image_process_option)
        self.group_binary_param = QtWidgets.QGroupBox(self.verticalLayoutWidget)
        self.group_binary_param.setObjectName("group_binary_param")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.group_binary_param)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 20, 221, 71))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.spin_bin_thr_min = QtWidgets.QSpinBox(self.verticalLayoutWidget_4)
        self.spin_bin_thr_min.setMaximumSize(QtCore.QSize(16777215, 20))
        self.spin_bin_thr_min.setMaximum(255)
        self.spin_bin_thr_min.setObjectName("spin_bin_thr_min")
        self.horizontalLayout_2.addWidget(self.spin_bin_thr_min)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.spin_bin_thr_max = QtWidgets.QSpinBox(self.verticalLayoutWidget_4)
        self.spin_bin_thr_max.setMaximumSize(QtCore.QSize(16777215, 20))
        self.spin_bin_thr_max.setMaximum(255)
        self.spin_bin_thr_max.setObjectName("spin_bin_thr_max")
        self.horizontalLayout_2.addWidget(self.spin_bin_thr_max)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.spin_bin_thr = QtWidgets.QSpinBox(self.verticalLayoutWidget_4)
        self.spin_bin_thr.setMaximum(255)
        self.spin_bin_thr.setProperty("value", 100)
        self.spin_bin_thr.setObjectName("spin_bin_thr")
        self.horizontalLayout_7.addWidget(self.spin_bin_thr)
        self.slider_bin_thr = QtWidgets.QSlider(self.verticalLayoutWidget_4)
        self.slider_bin_thr.setMaximum(255)
        self.slider_bin_thr.setOrientation(QtCore.Qt.Horizontal)
        self.slider_bin_thr.setObjectName("slider_bin_thr")
        self.horizontalLayout_7.addWidget(self.slider_bin_thr)
        self.verticalLayout_4.addLayout(self.horizontalLayout_7)
        self.verticalLayout.addWidget(self.group_binary_param)
        self.verticalLayout_7.addWidget(self.groupBox)
        self.groupBox_12 = QtWidgets.QGroupBox(self.verticalLayoutWidget_7)
        self.groupBox_12.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_12.setFlat(True)
        self.groupBox_12.setObjectName("groupBox_12")
        self.verticalLayoutWidget_16 = QtWidgets.QWidget(self.groupBox_12)
        self.verticalLayoutWidget_16.setGeometry(QtCore.QRect(10, 20, 241, 51))
        self.verticalLayoutWidget_16.setObjectName("verticalLayoutWidget_16")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_16)
        self.verticalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_17.addWidget(self.pushButton)
        self.verticalLayout_7.addWidget(self.groupBox_12)
        self.function_select_tab.addTab(self.function_select_tab_1, "")
        self.function_select_tab_2 = QtWidgets.QWidget()
        self.function_select_tab_2.setObjectName("function_select_tab_2")
        self.verticalLayoutWidget_8 = QtWidgets.QWidget(self.function_select_tab_2)
        self.verticalLayoutWidget_8.setGeometry(QtCore.QRect(0, 0, 261, 661))
        self.verticalLayoutWidget_8.setObjectName("verticalLayoutWidget_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_8)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.group_map_process = QtWidgets.QGroupBox(self.verticalLayoutWidget_8)
        self.group_map_process.setMaximumSize(QtCore.QSize(16777215, 200))
        self.group_map_process.setAlignment(QtCore.Qt.AlignCenter)
        self.group_map_process.setFlat(True)
        self.group_map_process.setCheckable(False)
        self.group_map_process.setChecked(False)
        self.group_map_process.setObjectName("group_map_process")
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.group_map_process)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(10, 20, 241, 181))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.btn_inverse = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.btn_inverse.setObjectName("btn_inverse")
        self.verticalLayout_5.addWidget(self.btn_inverse)
        self.btn_downsampling = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.btn_downsampling.setObjectName("btn_downsampling")
        self.verticalLayout_5.addWidget(self.btn_downsampling)
        self.btn_dilate = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.btn_dilate.setObjectName("btn_dilate")
        self.verticalLayout_5.addWidget(self.btn_dilate)
        self.group_dilate = QtWidgets.QGroupBox(self.verticalLayoutWidget_5)
        self.group_dilate.setObjectName("group_dilate")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.group_dilate)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(9, 19, 221, 61))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.label_3.setMaximumSize(QtCore.QSize(60, 16777215))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_5.addWidget(self.label_3)
        self.spin_dilate_radius = QtWidgets.QSpinBox(self.verticalLayoutWidget_6)
        self.spin_dilate_radius.setMinimumSize(QtCore.QSize(60, 0))
        self.spin_dilate_radius.setMaximum(255)
        self.spin_dilate_radius.setProperty("value", 0)
        self.spin_dilate_radius.setObjectName("spin_dilate_radius")
        self.horizontalLayout_5.addWidget(self.spin_dilate_radius)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem1)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.label_4.setMaximumSize(QtCore.QSize(60, 16777215))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.spin_dilate_iterations = QtWidgets.QSpinBox(self.verticalLayoutWidget_6)
        self.spin_dilate_iterations.setMinimumSize(QtCore.QSize(60, 0))
        self.spin_dilate_iterations.setMaximum(255)
        self.spin_dilate_iterations.setObjectName("spin_dilate_iterations")
        self.horizontalLayout_4.addWidget(self.spin_dilate_iterations)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.verticalLayout_5.addWidget(self.group_dilate)
        self.verticalLayout_8.addWidget(self.group_map_process)
        self.groupBox_2 = QtWidgets.QGroupBox(self.verticalLayoutWidget_8)
        self.groupBox_2.setMaximumSize(QtCore.QSize(16777215, 230))
        self.groupBox_2.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_2.setFlat(True)
        self.groupBox_2.setCheckable(False)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayoutWidget_9 = QtWidgets.QWidget(self.groupBox_2)
        self.verticalLayoutWidget_9.setGeometry(QtCore.QRect(9, 19, 241, 201))
        self.verticalLayoutWidget_9.setObjectName("verticalLayoutWidget_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_9)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.groupBox_3 = QtWidgets.QGroupBox(self.verticalLayoutWidget_9)
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayoutWidget_10 = QtWidgets.QWidget(self.groupBox_3)
        self.verticalLayoutWidget_10.setGeometry(QtCore.QRect(10, 20, 221, 61))
        self.verticalLayoutWidget_10.setObjectName("verticalLayoutWidget_10")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_10)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.btn_set_src = QtWidgets.QPushButton(self.verticalLayoutWidget_10)
        self.btn_set_src.setObjectName("btn_set_src")
        self.verticalLayout_10.addWidget(self.btn_set_src)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_10)
        self.label_5.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_8.addWidget(self.label_5)
        self.spin_src_x = QtWidgets.QSpinBox(self.verticalLayoutWidget_10)
        self.spin_src_x.setMaximum(5000)
        self.spin_src_x.setObjectName("spin_src_x")
        self.horizontalLayout_8.addWidget(self.spin_src_x)
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_10)
        self.label_6.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_8.addWidget(self.label_6)
        self.spin_src_y = QtWidgets.QSpinBox(self.verticalLayoutWidget_10)
        self.spin_src_y.setMaximum(5000)
        self.spin_src_y.setObjectName("spin_src_y")
        self.horizontalLayout_8.addWidget(self.spin_src_y)
        self.verticalLayout_10.addLayout(self.horizontalLayout_8)
        self.verticalLayout_9.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.verticalLayoutWidget_9)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayoutWidget_11 = QtWidgets.QWidget(self.groupBox_4)
        self.verticalLayoutWidget_11.setGeometry(QtCore.QRect(10, 20, 221, 61))
        self.verticalLayoutWidget_11.setObjectName("verticalLayoutWidget_11")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_11)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.btn_set_dst = QtWidgets.QPushButton(self.verticalLayoutWidget_11)
        self.btn_set_dst.setObjectName("btn_set_dst")
        self.verticalLayout_12.addWidget(self.btn_set_dst)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_9 = QtWidgets.QLabel(self.verticalLayoutWidget_11)
        self.label_9.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_10.addWidget(self.label_9)
        self.spin_dst_x = QtWidgets.QSpinBox(self.verticalLayoutWidget_11)
        self.spin_dst_x.setMaximum(5000)
        self.spin_dst_x.setObjectName("spin_dst_x")
        self.horizontalLayout_10.addWidget(self.spin_dst_x)
        self.label_10 = QtWidgets.QLabel(self.verticalLayoutWidget_11)
        self.label_10.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_10.addWidget(self.label_10)
        self.spin_dst_y = QtWidgets.QSpinBox(self.verticalLayoutWidget_11)
        self.spin_dst_y.setMaximum(5000)
        self.spin_dst_y.setObjectName("spin_dst_y")
        self.horizontalLayout_10.addWidget(self.spin_dst_y)
        self.verticalLayout_12.addLayout(self.horizontalLayout_10)
        self.verticalLayout_9.addWidget(self.groupBox_4)
        self.verticalLayout_8.addWidget(self.groupBox_2)
        self.groupBox_5 = QtWidgets.QGroupBox(self.verticalLayoutWidget_8)
        self.groupBox_5.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_5.setFlat(True)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayoutWidget_12 = QtWidgets.QWidget(self.groupBox_5)
        self.verticalLayoutWidget_12.setGeometry(QtCore.QRect(9, 19, 244, 211))
        self.verticalLayoutWidget_12.setObjectName("verticalLayoutWidget_12")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_12)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.btn_start_search = QtWidgets.QPushButton(self.verticalLayoutWidget_12)
        self.btn_start_search.setObjectName("btn_start_search")
        self.horizontalLayout_16.addWidget(self.btn_start_search)
        self.verticalLayout_13.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_11 = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.label_11.setMinimumSize(QtCore.QSize(85, 0))
        self.label_11.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_12.addWidget(self.label_11)
        self.spin_unreachable_threshold = QtWidgets.QSpinBox(self.verticalLayoutWidget_12)
        self.spin_unreachable_threshold.setMaximum(255)
        self.spin_unreachable_threshold.setSingleStep(1)
        self.spin_unreachable_threshold.setProperty("value", 255)
        self.spin_unreachable_threshold.setObjectName("spin_unreachable_threshold")
        self.horizontalLayout_12.addWidget(self.spin_unreachable_threshold)
        spacerItem3 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem3)
        self.verticalLayout_13.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_12 = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.label_12.setMinimumSize(QtCore.QSize(85, 0))
        self.label_12.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_15.addWidget(self.label_12)
        self.spin_weight_g = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget_12)
        self.spin_weight_g.setMaximum(1.0)
        self.spin_weight_g.setSingleStep(0.01)
        self.spin_weight_g.setProperty("value", 0.5)
        self.spin_weight_g.setObjectName("spin_weight_g")
        self.horizontalLayout_15.addWidget(self.spin_weight_g)
        spacerItem4 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem4)
        self.verticalLayout_13.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_13 = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.label_13.setMinimumSize(QtCore.QSize(85, 0))
        self.label_13.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_14.addWidget(self.label_13)
        self.spin_weight_h = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget_12)
        self.spin_weight_h.setMaximum(1.0)
        self.spin_weight_h.setSingleStep(0.01)
        self.spin_weight_h.setProperty("value", 1.0)
        self.spin_weight_h.setObjectName("spin_weight_h")
        self.horizontalLayout_14.addWidget(self.spin_weight_h)
        spacerItem5 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_14.addItem(spacerItem5)
        self.verticalLayout_13.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_14 = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.label_14.setMaximumSize(QtCore.QSize(60, 16777215))
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_13.addWidget(self.label_14)
        self.combo_distance_method = QtWidgets.QComboBox(self.verticalLayoutWidget_12)
        self.combo_distance_method.setObjectName("combo_distance_method")
        self.combo_distance_method.addItem("")
        self.combo_distance_method.addItem("")
        self.combo_distance_method.addItem("")
        self.horizontalLayout_13.addWidget(self.combo_distance_method)
        self.verticalLayout_13.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_15 = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.label_15.setMaximumSize(QtCore.QSize(60, 16777215))
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_11.addWidget(self.label_15)
        self.combo_search_method = QtWidgets.QComboBox(self.verticalLayoutWidget_12)
        self.combo_search_method.setMinimumSize(QtCore.QSize(110, 0))
        self.combo_search_method.setObjectName("combo_search_method")
        self.combo_search_method.addItem("")
        self.combo_search_method.addItem("")
        self.horizontalLayout_11.addWidget(self.combo_search_method)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem6)
        self.verticalLayout_13.addLayout(self.horizontalLayout_11)
        self.verticalLayout_8.addWidget(self.groupBox_5)
        self.function_select_tab.addTab(self.function_select_tab_2, "")
        self.function_select_tab_3 = QtWidgets.QWidget()
        self.function_select_tab_3.setObjectName("function_select_tab_3")
        self.verticalLayoutWidget_13 = QtWidgets.QWidget(self.function_select_tab_3)
        self.verticalLayoutWidget_13.setGeometry(QtCore.QRect(0, 10, 261, 341))
        self.verticalLayoutWidget_13.setObjectName("verticalLayoutWidget_13")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_13)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.btn_smooth_path = QtWidgets.QPushButton(self.verticalLayoutWidget_13)
        self.btn_smooth_path.setObjectName("btn_smooth_path")
        self.verticalLayout_14.addWidget(self.btn_smooth_path)
        self.groupBox_7 = QtWidgets.QGroupBox(self.verticalLayoutWidget_13)
        self.groupBox_7.setMinimumSize(QtCore.QSize(0, 210))
        self.groupBox_7.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_7.setFlat(True)
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayoutWidget_15 = QtWidgets.QWidget(self.groupBox_7)
        self.verticalLayoutWidget_15.setGeometry(QtCore.QRect(9, 19, 241, 181))
        self.verticalLayoutWidget_15.setObjectName("verticalLayoutWidget_15")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_15)
        self.verticalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.groupBox_9 = QtWidgets.QGroupBox(self.verticalLayoutWidget_15)
        self.groupBox_9.setObjectName("groupBox_9")
        self.horizontalLayoutWidget_13 = QtWidgets.QWidget(self.groupBox_9)
        self.horizontalLayoutWidget_13.setGeometry(QtCore.QRect(10, 20, 221, 31))
        self.horizontalLayoutWidget_13.setObjectName("horizontalLayoutWidget_13")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_13)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.spin_weight_smooth = QtWidgets.QDoubleSpinBox(self.horizontalLayoutWidget_13)
        self.spin_weight_smooth.setMinimumSize(QtCore.QSize(55, 0))
        self.spin_weight_smooth.setMaximumSize(QtCore.QSize(55, 16777215))
        self.spin_weight_smooth.setMaximum(10.0)
        self.spin_weight_smooth.setSingleStep(0.1)
        self.spin_weight_smooth.setProperty("value", 1.0)
        self.spin_weight_smooth.setObjectName("spin_weight_smooth")
        self.horizontalLayout_17.addWidget(self.spin_weight_smooth)
        self.slider_weight_smooth = QtWidgets.QSlider(self.horizontalLayoutWidget_13)
        self.slider_weight_smooth.setMaximum(101)
        self.slider_weight_smooth.setSingleStep(1)
        self.slider_weight_smooth.setProperty("value", 10)
        self.slider_weight_smooth.setOrientation(QtCore.Qt.Horizontal)
        self.slider_weight_smooth.setObjectName("slider_weight_smooth")
        self.horizontalLayout_17.addWidget(self.slider_weight_smooth)
        self.verticalLayout_16.addWidget(self.groupBox_9)
        self.groupBox_10 = QtWidgets.QGroupBox(self.verticalLayoutWidget_15)
        self.groupBox_10.setObjectName("groupBox_10")
        self.horizontalLayoutWidget_14 = QtWidgets.QWidget(self.groupBox_10)
        self.horizontalLayoutWidget_14.setGeometry(QtCore.QRect(10, 20, 221, 31))
        self.horizontalLayoutWidget_14.setObjectName("horizontalLayoutWidget_14")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_14)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.spin_weight_length = QtWidgets.QDoubleSpinBox(self.horizontalLayoutWidget_14)
        self.spin_weight_length.setMinimumSize(QtCore.QSize(55, 0))
        self.spin_weight_length.setMaximumSize(QtCore.QSize(55, 16777215))
        self.spin_weight_length.setMaximum(10.0)
        self.spin_weight_length.setSingleStep(0.1)
        self.spin_weight_length.setProperty("value", 1.0)
        self.spin_weight_length.setObjectName("spin_weight_length")
        self.horizontalLayout_18.addWidget(self.spin_weight_length)
        self.slider_weight_length = QtWidgets.QSlider(self.horizontalLayoutWidget_14)
        self.slider_weight_length.setMaximum(101)
        self.slider_weight_length.setProperty("value", 10)
        self.slider_weight_length.setOrientation(QtCore.Qt.Horizontal)
        self.slider_weight_length.setObjectName("slider_weight_length")
        self.horizontalLayout_18.addWidget(self.slider_weight_length)
        self.verticalLayout_16.addWidget(self.groupBox_10)
        self.groupBox_11 = QtWidgets.QGroupBox(self.verticalLayoutWidget_15)
        self.groupBox_11.setObjectName("groupBox_11")
        self.horizontalLayoutWidget_15 = QtWidgets.QWidget(self.groupBox_11)
        self.horizontalLayoutWidget_15.setGeometry(QtCore.QRect(10, 20, 221, 31))
        self.horizontalLayoutWidget_15.setObjectName("horizontalLayoutWidget_15")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_15)
        self.horizontalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.spin_weight_overlap = QtWidgets.QDoubleSpinBox(self.horizontalLayoutWidget_15)
        self.spin_weight_overlap.setMinimumSize(QtCore.QSize(55, 0))
        self.spin_weight_overlap.setMaximumSize(QtCore.QSize(55, 16777215))
        self.spin_weight_overlap.setMaximum(10.0)
        self.spin_weight_overlap.setSingleStep(0.1)
        self.spin_weight_overlap.setProperty("value", 1.0)
        self.spin_weight_overlap.setObjectName("spin_weight_overlap")
        self.horizontalLayout_19.addWidget(self.spin_weight_overlap)
        self.slider_weight_overlap = QtWidgets.QSlider(self.horizontalLayoutWidget_15)
        self.slider_weight_overlap.setMaximum(101)
        self.slider_weight_overlap.setProperty("value", 10)
        self.slider_weight_overlap.setOrientation(QtCore.Qt.Horizontal)
        self.slider_weight_overlap.setObjectName("slider_weight_overlap")
        self.horizontalLayout_19.addWidget(self.slider_weight_overlap)
        self.verticalLayout_16.addWidget(self.groupBox_11)
        self.verticalLayout_14.addWidget(self.groupBox_7)
        self.groupBox_8 = QtWidgets.QGroupBox(self.verticalLayoutWidget_13)
        self.groupBox_8.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_8.setFlat(True)
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayoutWidget_14 = QtWidgets.QWidget(self.groupBox_8)
        self.verticalLayoutWidget_14.setGeometry(QtCore.QRect(9, 19, 241, 71))
        self.verticalLayoutWidget_14.setObjectName("verticalLayoutWidget_14")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_14)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.groupBox_6 = QtWidgets.QGroupBox(self.verticalLayoutWidget_14)
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayoutWidget_16 = QtWidgets.QWidget(self.groupBox_6)
        self.horizontalLayoutWidget_16.setGeometry(QtCore.QRect(10, 20, 221, 31))
        self.horizontalLayoutWidget_16.setObjectName("horizontalLayoutWidget_16")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_16)
        self.horizontalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.spin_position_constrain = QtWidgets.QDoubleSpinBox(self.horizontalLayoutWidget_16)
        self.spin_position_constrain.setMinimumSize(QtCore.QSize(55, 0))
        self.spin_position_constrain.setMaximumSize(QtCore.QSize(55, 16777215))
        self.spin_position_constrain.setMaximum(10.0)
        self.spin_position_constrain.setSingleStep(0.1)
        self.spin_position_constrain.setProperty("value", 2.0)
        self.spin_position_constrain.setObjectName("spin_position_constrain")
        self.horizontalLayout_20.addWidget(self.spin_position_constrain)
        self.slider_positionr_constrain = QtWidgets.QSlider(self.horizontalLayoutWidget_16)
        self.slider_positionr_constrain.setMaximum(101)
        self.slider_positionr_constrain.setProperty("value", 10)
        self.slider_positionr_constrain.setOrientation(QtCore.Qt.Horizontal)
        self.slider_positionr_constrain.setObjectName("slider_positionr_constrain")
        self.horizontalLayout_20.addWidget(self.slider_positionr_constrain)
        self.verticalLayout_15.addWidget(self.groupBox_6)
        self.verticalLayout_14.addWidget(self.groupBox_8)
        self.function_select_tab.addTab(self.function_select_tab_3, "")
        self.horizontalLayout.addWidget(self.function_select_tab)
        spacerItem7 = QtWidgets.QSpacerItem(5, 688, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem7)
        self.image_tab = QtWidgets.QTabWidget(self.horizontalLayoutWidget)
        self.image_tab.setMinimumSize(QtCore.QSize(750, 600))
        self.image_tab.setMaximumSize(QtCore.QSize(800, 700))
        self.image_tab.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.image_tab.setMouseTracking(True)
        self.image_tab.setObjectName("image_tab")
        self.tab_interact = QtWidgets.QWidget()
        self.tab_interact.setMinimumSize(QtCore.QSize(800, 800))
        self.tab_interact.setMaximumSize(QtCore.QSize(900, 900))
        self.tab_interact.setObjectName("tab_interact")
        self.label_interact = QtWidgets.QLabel(self.tab_interact)
        self.label_interact.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_interact.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_interact.setMouseTracking(True)
        self.label_interact.setAutoFillBackground(False)
        self.label_interact.setText("")
        self.label_interact.setAlignment(QtCore.Qt.AlignCenter)
        self.label_interact.setObjectName("label_interact")
        self.image_tab.addTab(self.tab_interact, "")
        self.tab_image_source = QtWidgets.QWidget()
        self.tab_image_source.setObjectName("tab_image_source")
        self.label_image_source = QtWidgets.QLabel(self.tab_image_source)
        self.label_image_source.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_image_source.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_image_source.setMouseTracking(True)
        self.label_image_source.setText("")
        self.label_image_source.setAlignment(QtCore.Qt.AlignCenter)
        self.label_image_source.setObjectName("label_image_source")
        self.image_tab.addTab(self.tab_image_source, "")
        self.tab_map_grid = QtWidgets.QWidget()
        self.tab_map_grid.setObjectName("tab_map_grid")
        self.label_map_grid = QtWidgets.QLabel(self.tab_map_grid)
        self.label_map_grid.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_map_grid.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_map_grid.setMouseTracking(True)
        self.label_map_grid.setText("")
        self.label_map_grid.setAlignment(QtCore.Qt.AlignCenter)
        self.label_map_grid.setObjectName("label_map_grid")
        self.image_tab.addTab(self.tab_map_grid, "")
        self.tab_map_dilate = QtWidgets.QWidget()
        self.tab_map_dilate.setObjectName("tab_map_dilate")
        self.label_map_dilate = QtWidgets.QLabel(self.tab_map_dilate)
        self.label_map_dilate.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_map_dilate.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_map_dilate.setMouseTracking(True)
        self.label_map_dilate.setText("")
        self.label_map_dilate.setAlignment(QtCore.Qt.AlignCenter)
        self.label_map_dilate.setObjectName("label_map_dilate")
        self.image_tab.addTab(self.tab_map_dilate, "")
        self.tab_map_search = QtWidgets.QWidget()
        self.tab_map_search.setObjectName("tab_map_search")
        self.label_map_search = QtWidgets.QLabel(self.tab_map_search)
        self.label_map_search.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_map_search.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_map_search.setMouseTracking(True)
        self.label_map_search.setText("")
        self.label_map_search.setAlignment(QtCore.Qt.AlignCenter)
        self.label_map_search.setObjectName("label_map_search")
        self.image_tab.addTab(self.tab_map_search, "")
        self.tab_smooth = QtWidgets.QWidget()
        self.tab_smooth.setObjectName("tab_smooth")
        self.label_smooth = QtWidgets.QLabel(self.tab_smooth)
        self.label_smooth.setGeometry(QtCore.QRect(10, 10, 761, 641))
        self.label_smooth.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.label_smooth.setMouseTracking(True)
        self.label_smooth.setText("")
        self.label_smooth.setAlignment(QtCore.Qt.AlignCenter)
        self.label_smooth.setObjectName("label_smooth")
        self.image_tab.addTab(self.tab_smooth, "")
        self.horizontalLayout.addWidget(self.image_tab)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        self.function_select_tab.setCurrentIndex(2)
        self.combo_distance_method.setCurrentIndex(0)
        self.image_tab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.group_import.setTitle(_translate("MainWindow", "导入"))
        self.btn_import_image.setText(_translate("MainWindow", "导入图像"))
        self.image_detail_text_box.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">path:</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">size:(0, 0)</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">cursor:(0, 0)</p></body></html>"))
        self.groupBox.setTitle(_translate("MainWindow", "二值化参数"))
        self.btn_image_process.setText(_translate("MainWindow", "处理图像"))
        self.group_image_process_option.setTitle(_translate("MainWindow", "选项"))
        self.btn_gray.setText(_translate("MainWindow", "灰度化"))
        self.btn_binary.setText(_translate("MainWindow", "二值化"))
        self.group_binary_param.setTitle(_translate("MainWindow", "二值化阈值 (if >threshold => 255 )"))
        self.label.setText(_translate("MainWindow", "min:"))
        self.label_2.setText(_translate("MainWindow", "max:"))
        self.groupBox_12.setTitle(_translate("MainWindow", "保存图片"))
        self.pushButton.setText(_translate("MainWindow", "保存图片"))
        self.function_select_tab.setTabText(self.function_select_tab.indexOf(self.function_select_tab_1), _translate("MainWindow", "图像处理"))
        self.group_map_process.setTitle(_translate("MainWindow", "地图处理"))
        self.btn_inverse.setText(_translate("MainWindow", "黑白反转"))
        self.btn_downsampling.setText(_translate("MainWindow", "降采样"))
        self.btn_dilate.setText(_translate("MainWindow", "膨胀处理"))
        self.group_dilate.setTitle(_translate("MainWindow", "膨胀参数"))
        self.label_3.setText(_translate("MainWindow", "膨胀半径："))
        self.label_4.setText(_translate("MainWindow", "膨胀次数："))
        self.groupBox_2.setTitle(_translate("MainWindow", "起点终点设置"))
        self.groupBox_3.setTitle(_translate("MainWindow", "起点"))
        self.btn_set_src.setText(_translate("MainWindow", "选择起点"))
        self.label_5.setText(_translate("MainWindow", "x:"))
        self.label_6.setText(_translate("MainWindow", "y:"))
        self.groupBox_4.setTitle(_translate("MainWindow", "终点"))
        self.btn_set_dst.setText(_translate("MainWindow", "选择终点"))
        self.label_9.setText(_translate("MainWindow", "x:"))
        self.label_10.setText(_translate("MainWindow", "y:"))
        self.groupBox_5.setTitle(_translate("MainWindow", "搜索参数"))
        self.btn_start_search.setText(_translate("MainWindow", "开始搜索"))
        self.label_11.setText(_translate("MainWindow", "不可达阈值:"))
        self.label_12.setText(_translate("MainWindow", "代价权重(wg):"))
        self.label_13.setText(_translate("MainWindow", "启发权重(wh):"))
        self.label_14.setText(_translate("MainWindow", "距离算法:"))
        self.combo_distance_method.setItemText(0, _translate("MainWindow", "欧几里得距离（Euclidean）"))
        self.combo_distance_method.setItemText(1, _translate("MainWindow", "对角距离（Diagonal）"))
        self.combo_distance_method.setItemText(2, _translate("MainWindow", "曼哈顿距离（Manhattan）"))
        self.label_15.setText(_translate("MainWindow", "搜索方法:"))
        self.combo_search_method.setItemText(0, _translate("MainWindow", "八邻域（eight）"))
        self.combo_search_method.setItemText(1, _translate("MainWindow", "四邻域（four）"))
        self.function_select_tab.setTabText(self.function_select_tab.indexOf(self.function_select_tab_2), _translate("MainWindow", "地图参数"))
        self.btn_smooth_path.setText(_translate("MainWindow", "优化路径"))
        self.groupBox_7.setTitle(_translate("MainWindow", "代价权重"))
        self.groupBox_9.setTitle(_translate("MainWindow", "路径平滑度代价"))
        self.groupBox_10.setTitle(_translate("MainWindow", "路径长度代价"))
        self.groupBox_11.setTitle(_translate("MainWindow", "路径重合度代价"))
        self.groupBox_8.setTitle(_translate("MainWindow", "约束参数"))
        self.groupBox_6.setTitle(_translate("MainWindow", "位置约束"))
        self.function_select_tab.setTabText(self.function_select_tab.indexOf(self.function_select_tab_3), _translate("MainWindow", "优化参数"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_interact), _translate("MainWindow", "交互"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_image_source), _translate("MainWindow", "原始图像"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_map_grid), _translate("MainWindow", "栅格地图"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_map_dilate), _translate("MainWindow", "膨胀地图"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_map_search), _translate("MainWindow", "图搜索"))
        self.image_tab.setTabText(self.image_tab.indexOf(self.tab_smooth), _translate("MainWindow", "曲线平滑优化"))


# 八邻域搜索
#  ------------------------------------------>
#  |  x(i-1, j-1)   x(x, j-1)   x(i+1, j-1)  |      0   1   2
#  |  x(i-1, j)     x(i, j)     x(i+1, j)    |      7   X   3
#  |  x(i-1, j+1)   x(i, j+1)   x(i+1, j+1)  |      6   5   4
#  <------------------------------------------

# 四邻域搜索
#  ------------------------------------------>
#  |                x(x, j-1)                |          0
#  |  x(i-1, j)     x(i, j)     x(i+1, j)    |      3   X   1
#  |                x(i, j+1)                |          2
#  <------------------------------------------


# optimal the algorithm based on grid map
class Node:
    def __init__(self, x, y, cost, parent=None):
        self.position = [x, y]
        self.parent = parent
        self.cost = cost
        self.g = 0.0  # 从起点到当前节点的实际代价
        self.h = 0.0  # 从当前节点到终点的启发式代价
        self.f = 0.0  # 总代价 f = g + h

    def __eq__(self, other):
        return self.f == other.f

    def __lt__(self, other):
        return self.f < other.f

    def __repr__(self):
        return f"Node({self.position}, cost={self.cost}, g={self.g}, h={self.h}, f={self.f})"

    def same_point(self, other):
        if self.position[0] == other.position[0] and self.position[1] == other.position[1]:
            return True
        else:
            return False



def distance(a, b, method='euclidean'):
    if method == 'euclidean':
        return np.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)
    elif method == 'manhattan':
        return abs(a[0] - b[0]) + abs(a[1] - b[1])
    elif method == 'diagonal':
        x_dis = abs(a[0] - b[0])
        y_dis = abs(a[1] - b[1])
        return abs(x_dis - y_dis) + np.sqrt(2)*min([x_dis, y_dis])


def a_in_list(a:Node, node_list : list[Node]):
    for i in range(0, len(node_list)):
        node = node_list[i]
        if a.same_point(node):
            return i, node
    return -1, None

def a_star_search(start, goal, grid, threshold=np.inf, w_g = 1.0, w_h = 1.0, dis_method='euclidean', search_method='four'):
    open_list = []
    closed_list = []
    grid_shape = grid.shape
    open_area = np.zeros(grid_shape, dtype=np.uint8)
    closed_area = np.zeros(grid_shape, dtype=np.uint8)
    start_node = Node(start[0], start[1], grid[start[0]][start[1]])
    start_node.h = distance(start_node.position, start_node.position, dis_method)
    start_node.f = start_node.h
    goal_node = Node(goal[0], goal[1], grid[goal[0]][goal[1]])
    if search_method == 'eight':
        search_list_dir = [(-1, -1), (0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0)]
    elif search_method == 'four':
        search_list_dir = [(0, -1), (1, 0), (0, 1), (-1, 0)]
    else:
        search_list_dir = [(0, -1), (1, 0), (0, 1), (-1, 0)]
    print('start:', start_node)
    print('goal:', goal_node)
    print(f"w_g: {w_g}, w_h:{w_h}, dis_method: {dis_method}, search_method: {search_method}")
    heapq.heappush(open_list, start_node)
    open_area[start[0],  start[1]] = 1
    cnt = 0
    while open_list:
        # print(cnt)
        cnt += 1
        current_node = heapq.heappop(open_list)
        # print(f"{cnt} select: ", current_node)
        if current_node.same_point(goal_node):
            total_cost = current_node.g
            print("total cost:", total_cost)
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            # print('open list =====================================================\n')
            # for node in open_list:
            #     print(node)
            # print('closed list ===================================================\n', closed_list)
            # for node in closed_list:
            #     print(node)
            return open_area, closed_area, path[::-1]

        closed_list.append(current_node)
        closed_area[current_node.position[0], current_node.position[1]] = 1
        # 八邻域搜索
        #  ------------------------------------------>
        #  |  x(i-1, j-1)   x(x, j-1)   x(i+1, j-1)  |      0   1   2
        #  |  x(i-1, j)     x(i, j)     x(i+1, j)    |      7   X   3
        #  |  x(i-1, j+1)   x(i, j+1)   x(i+1, j+1)  |      6   5   4
        #  <------------------------------------------

        # 四邻域搜索
        #  ------------------------------------------>
        #  |                x(x, j-1)                |          0
        #  |  x(i-1, j)     x(i, j)     x(i+1, j)    |      3   X   1
        #  |                x(i, j+1)                |          2
        #  <------------------------------------------

        # for dx, dy in [(0, -1), (1, 0), (0, 1), (-1, 0)]:
        for di, dj in search_list_dir:
            neighbor_position = [current_node.position[0] + di, current_node.position[1] + dj]
            # 超出地图范围则忽略
            if not (0 <= neighbor_position[0] < grid_shape[0] and 0 <= neighbor_position[1] < grid_shape[1]):
                continue
            cost = grid[neighbor_position[0], neighbor_position[1]]
            neighbor_node = Node(neighbor_position[0], neighbor_position[1], cost, current_node)
            neighbor_node.g = current_node.g + neighbor_node.cost
            neighbor_node.h = distance(neighbor_node.position, goal_node.position, dis_method)
            # neighbor_node.h = distance(neighbor_node.position, goal_node.position, 'diagonal')
            neighbor_node.f = w_g * neighbor_node.g + w_h * neighbor_node.h

            # 超过阈值视为障碍物，忽略
            if cost >= threshold:
                continue

            # 如果在open表中，则处理
            n_index, old_node = a_in_list(neighbor_node, open_list)
            if n_index == -1:
                pass
            elif neighbor_node.g < old_node.g:
                open_list[n_index].g = neighbor_node.g
                open_list[n_index].f = neighbor_node.f
                open_list[n_index].parent = neighbor_node.parent
                continue
            else:
                continue

            # 如果在closed表中，则处理
            n_index, old_node = a_in_list(neighbor_node, closed_list)
            if n_index == -1:
                pass
            elif neighbor_node.g < old_node.g:
                closed_list[n_index].g = neighbor_node.g
                closed_list[n_index].f = neighbor_node.f
                closed_list[n_index].parent = neighbor_node.parent
                continue
                # del closed_list[n_index]
            else:
                continue


            # if not any(node.g <= neighbor_node.g for node in open_list):
            #     heapq.heappush(open_list, neighbor_node)
            heapq.heappush(open_list, neighbor_node)
            open_area[neighbor_node.position[0], neighbor_node.position[1]] = 1
            # print(neighbor_node)
            # print(open_list)
    return None

def make_matrix_P(n=100, w_A=1.0, w_B=1.0, w_C=1.0):
    m = n*2
    A = np.zeros((m, m))
    B = np.zeros((m, m))
    C = np.eye(m, m)
    for i in range(0, n - 1):
        A[i:i+2, i:i+2] += [[1, -1], [-1, 1]]
    A[n:, n:] = A[0:n, 0:n]
    for i in range(0, n - 2):
        B[i:i + 3, i:i + 3] += [[1, -2, 1], [-2, 4, -2], [1, -2, 1]]
    B[n:, n:] = B[0:n, 0:n]
    _P = w_A*A + w_B*B + w_C*C
    _P = _P * 2.0
    # point_xy = np.zeros((m, 1))
    # point_xy[0:n, 0] = pts[:, 0]
    # point_xy[n:, 0] = pts[:, 1]
    # _P = _P * point_xy
    return sparse.csc_matrix(_P)

def make_matrix_Q(pts, n=100):
    m = n*2
    _Q = np.zeros((m, 1))
    for i in range(0, m):
        _Q[i, 0] = -2
    point_xy = np.zeros((m, 1))
    point_xy[0:n, 0] = pts[:, 0]
    point_xy[n:, 0] = pts[:, 1]
    _Q = _Q * point_xy
    return _Q

def make_matrix_A(pts, n=100):
    m = n*2
    # A = np.zeros((m, m))
    _A = np.eye(m, m)
    return sparse.csc_matrix(_A)

def make_matrix_l(pts, n=100, R=np.inf):
    m = n*2
    _l = np.zeros((m, 1))
    point_xy = np.zeros((m, 1))
    point_xy[0:n, 0] = pts[:, 0]
    point_xy[n:, 0] = pts[:, 1]
    # for i in range(0, m):
    #     _l[i, 0] = -np.inf
    _l = point_xy - R
    # 等式约束起点和终点
    _l[0, 0]    = pts[0, 0]
    _l[n-1, 0]  = pts[n-1, 0]
    _l[n, 0]    = pts[0, 1]
    _l[m-1, 0]  = pts[n-1, 1]
    return _l

def make_matrix_u(pts, n=100, R=np.inf):
    m = n*2
    _u = np.zeros((m, 1))
    point_xy = np.zeros((m, 1))
    point_xy[0:n, 0] = pts[:, 0]
    point_xy[n:, 0] = pts[:, 1]
    # for i in range(0, m):
    #     _u[i, 0] = +np.inf
    _u = point_xy + R
    # 等式约束起点和终点
    _u[0, 0]   = pts[0, 0]
    _u[n-1, 0] = pts[n - 1, 0]
    _u[n, 0]   = pts[0, 1]
    _u[m-1, 0] = pts[n - 1, 1]
    return _u


def _cv2qt_rgb(cv_image:cv2.typing.MatLike)->QImage:
    h, w, c = cv_image.shape
    bytes_per_line = 3 * w
    q_img = QImage(cv_image.data, w, h, bytes_per_line,
                   QImage.Format_RGB888)
    return  q_img
def _cv2qt_gray(cv_image:cv2.typing.MatLike)->QImage:
    h, w = cv_image.shape
    bytes_per_line = w
    q_img = QImage(cv_image.data, w, h, bytes_per_line,
                   QImage.Format_Grayscale8)
    return  q_img

def _resize_image(source_image:cv2.typing.MatLike, image_box_size)-> cv2.typing.MatLike :
    re_image = source_image.copy()
    im_shape = re_image.shape
    im_width = im_shape[1]
    im_height = im_shape[0]
    box_width = image_box_size['width']
    box_height = image_box_size['height']
    # print(f'image size: ({im_width}, {im_height})')
    box_ratio =  box_width / box_height
    image_ratio = im_width / im_height
    if box_ratio > image_ratio:
        # print('1')
        scale_ratio = box_height / im_height
        # print(f'scale_ratio: {scale_ratio}')
        re_width = int(im_width * scale_ratio)
        re_height = int(im_height * scale_ratio)
        re_image = cv2.resize(re_image, (re_width, re_height), interpolation=cv2.INTER_AREA)
        # margin_width = int((box_width - re_width ) / 2)
        # top, bottom, left, right = 0, 0, margin_width, margin_width
        # border_color = [255, 255, 255]`
        # bordered_img = cv2.copyMakeBorder(re_image, top, bottom, left, right, cv2.BORDER_CONSTANT,
        #                                   value=border_color)
        # re_image = re_image.resize(x, y)
    else:
        # print('2')
        scale_ratio = box_width / im_width
        # print(f'scale_ratio: {scale_ratio}')
        re_width = int(im_width * scale_ratio)
        re_height = int(im_height * scale_ratio)
        re_image = cv2.resize(re_image, (re_width, re_height), interpolation=cv2.INTER_AREA)
        # re_image = re_image.resize(x, y)
        # margin_height = int((box_height - re_height) / 2)
        # top, bottom, left, right = margin_height, margin_height, 0, 0
        # border_color = [255, 255, 255]
        # bordered_img = cv2.copyMakeBorder(re_image, top, bottom, left, right, cv2.BORDER_CONSTANT,
        #                                   value=border_color)
    # print(f'box size:({box_width},{box_height})')
    # print(f're_image size:({re_width},{re_height})')
    return re_image, scale_ratio

class MainWindow(Ui_MainWindow, QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        # parameter
        # image import and process
        # image data
        self.image_current_cv = None
        self.image_current_qt = None
        self.image_current_pixmap = None

        self.image_source_cv = None
        self.image_source_qt = None
        self.image_source_pixmap = None

        self.image_resize_cv = None
        self.image_resize_qt = None
        self.image_resize_pixmap = None

        self.image_resize_gray_cv = None
        self.image_resize_gray_qt = None
        self.image_resize_gray_pixmap = None

        self.image_source_gray_cv = None
        self.image_source_gray_qt = None
        self.image_source_gray_pixmap = None

        self.image_resize_dilate_cv = None
        self.image_resize_dilate_qt = None
        self.image_resize_dilate_pixmap = None

        self.image_source_dilate_cv = None
        self.image_source_dilate_qt = None
        self.image_source_dilate_pixmap = None

        self.image_search_pixmap = None
        self.image_optimal_pixmap = None

        # image parameter
        self.image_path = ""
        self.image_detail_box_source_text = None
        # image process parameter
        self.image_process_mode = 'gray' # gray/binary
        self.bin_thr_min = 0
        self.bin_thr_max = 255
        self.bin_thr = 200
        self.image_size_source = {'width':0, 'height': 0}
        self.image_box_size = {'width':0, 'height': 0}
        self.scale_ratio = 1.0

        # map data
        self.map_grid = None
        self.map_grid_list = None
        self.map_dilate = None
        self.map_dilate_list = None
        self.open_area = None
        self.image_search_path = None
        self.image_smooth_path = None

        # map parameter
        self.dilate_radius = 0
        self.dilate_iterations = 0
        self.src_point = {'x':0.0, 'y':0.0}
        self.dst_point = {'x':0.0, 'y':0.0}
        self.unreachable_thr = 40
        self.w_g = 0.6
        self.w_h = 1.0
        self.distance_method = 'euclidean' # 'euclidean' / 'manhattan' / 'diagonal'
        self.search_method = 'eight' # 'eight' / 'four'
        self.search_cost_time = None
        # matplotlib
        # self.map_grid_plt, self.map_grid_plt_ax = plt.subplots(figsize=(8, 8), dpi=200)
        # self.map_dilate_plt, self.map_dilate_plt_ax = plt.subplots(figsize=(8, 8), dpi=200)
        # self.cmap_1 = plt.get_cmap('YlGnBu')
        # self.cmap_2 = plt.get_cmap('summer')

        # search parameter
        self.search_time = 0
        self.open_area = None
        self.closed_area = None
        self.search_path = None

        # optimal parameter
        self.smooth_cost = 1.0
        self.length_cost = 1.0
        self.overlap_cost = 1.0
        self.position_constrain = 1.0
        self.smooth_result = {'x':None, 'y':None}
        # function
        self.other_init()
        self.get_image_box_size()
        self.connect_list()

    def other_init(self):
        self.function_select_tab.setCurrentIndex(0)
        self.image_tab.setCurrentIndex(0)
        self.btn_gray.setChecked(True)
        self.spin_unreachable_threshold.setValue(self.unreachable_thr)
        self.spin_bin_thr.setValue(self.bin_thr)
        self.slider_bin_thr.setValue(self.bin_thr)
        pass

    def connect_list(self):
        self.btn_import_image.clicked.connect(self.handle_import_image)
        self.btn_gray.toggled.connect(self.handle_btn_gray)
        self.btn_binary.toggled.connect(self.handle_btn_binary)
        self.spin_bin_thr_min.valueChanged.connect(self.handle_spin_bin_thr_min)
        self.spin_bin_thr_max.valueChanged.connect(self.handle_spin_bin_thr_max)
        self.spin_bin_thr.valueChanged.connect(self.handle_spin_bin_thr)
        self.slider_bin_thr.valueChanged.connect(self.handle_slider_bin_thr)
        self.btn_image_process.clicked.connect(self.handle_btn_image_process)
        self.btn_dilate.clicked.connect(self.handle_btn_dilate)
        self.btn_inverse.clicked.connect(self.handle_btn_inverse)
        self.spin_dilate_radius.valueChanged.connect(self.handle_spin_dilate_radius)
        self.spin_dilate_iterations.valueChanged.connect(self.handle_spin_dilate_iterations)
        self.spin_dst_x.valueChanged.connect(self.handle_spin_dst_x)
        self.spin_dst_y.valueChanged.connect(self.handle_spin_dst_y)
        self.btn_set_src.clicked.connect(self.handle_btn_set_src)
        self.spin_dst_x.valueChanged.connect(self.handle_spin_dst_x)
        self.spin_dst_y.valueChanged.connect(self.handle_spin_dst_y)
        self.btn_set_dst.clicked.connect(self.handle_btn_set_dst)
        self.btn_start_search.clicked.connect(self.handle_btn_start_search)
        # self.btn_set_search_param.clicked.connect(self.handle_btn_set_search_param)
        self.spin_unreachable_threshold.valueChanged.connect(self.handle_spin_unreachable_threshold)
        self.spin_weight_g.valueChanged.connect(self.handle_spin_weight_g)
        self.spin_weight_h.valueChanged.connect(self.handle_spin_weight_h)
        self.combo_search_method.activated.connect(self.handle_combo_search_method)
        self.combo_distance_method.activated.connect(self.handle_combo_distance_method)
        self.image_tab.currentChanged.connect(self.handle_image_tab)
        # optimal param set
        self.spin_weight_smooth.valueChanged.connect(self.handle_spin_weight_smooth)
        self.slider_weight_smooth.valueChanged.connect(self.handle_slider_weight_smooth)
        self.spin_weight_length.valueChanged.connect(self.handle_spin_weight_length)
        self.slider_weight_length.valueChanged.connect(self.handle_slider_weight_length)
        self.spin_weight_overlap.valueChanged.connect(self.handle_spin_weight_overlap)
        self.slider_weight_overlap.valueChanged.connect(self.handle_slider_weight_overlap)
        self.spin_position_constrain.valueChanged.connect(self.handle_spin_position_constrain)
        self.slider_positionr_constrain.valueChanged.connect(self.handle_slider_position_constrain)
        self.btn_smooth_path.clicked.connect(self.handle_btn_smooth_path)
    def update_interact_image(self):
        self.label_interact.setPixmap(self.image_current_pixmap)
        self.image_tab.setCurrentIndex(0)

    def update_source_image(self):
        self.label_image_source.setPixmap(self.image_resize_pixmap)

    def update_statusBar(self, msg_str:str, time_msc:int=2000):
        self.statusBar.showMessage(msg_str, time_msc)

    def update_image_detail_box(self):
            _translate = QtCore.QCoreApplication.translate
            self.image_detail_box_source_text = f"""
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li {{ white-space: pre-wrap; }}
</style></head><body style=" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">path:{self.image_path}</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">size:({self.image_size_source['width']}, {self.image_size_source['height']})</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">cursor:(0, 0)</p></body></html>
            """
            self.image_detail_text_box.setHtml(_translate("MainWindow", self.image_detail_box_source_text))
            print('update box')

    def get_image_box_size(self):
        box_size = self.label_interact.size()
        self.image_box_size['width'] = box_size.width()
        self.image_box_size['height'] = box_size.height()
        # print(f'image box size:({self.image_box_size.width()}, {self.image_box_size.height()})')

    # # 调整图片大小适配图片框
    # def _resize_image(self, source_image:cv2.typing.MatLike)-> cv2.typing.MatLike :
    #     re_image = source_image.copy()
    #     im_shape = re_image.shape
    #     im_width = im_shape[1]
    #     im_height = im_shape[0]
    #     box_width = self.image_box_size['width']
    #     box_height = self.image_box_size['height']
    #     print(f'image size: ({im_width}, {im_height})')
    #     box_ratio =  box_width / box_height
    #     image_ratio = im_width / im_height
    #     bordered_img = None
    #     if box_ratio > image_ratio:
    #         print('1')
    #         self.scale_ratio = box_height / im_height
    #         print(f'scale_ratio: {self.scale_ratio}')
    #         re_width = int(im_width * self.scale_ratio)
    #         re_height = int(im_height * self.scale_ratio)
    #         re_image = cv2.resize(re_image, (re_width, re_height) )
    #         # margin_width = int((box_width - re_width ) / 2)
    #         # top, bottom, left, right = 0, 0, margin_width, margin_width
    #         # border_color = [255, 255, 255]
    #         # bordered_img = cv2.copyMakeBorder(re_image, top, bottom, left, right, cv2.BORDER_CONSTANT,
    #         #                                   value=border_color)
    #         # re_image = re_image.resize(x, y)
    #     else:
    #         print('2')
    #         self.scale_ratio = box_width / im_width
    #         print(f'scale_ratio: {self.scale_ratio}')
    #         re_width = int(im_width * self.scale_ratio)
    #         re_height = int(im_height * self.scale_ratio)
    #         re_image = cv2.resize(re_image, (re_width, re_height))
    #         # re_image = re_image.resize(x, y)
    #         # margin_height = int((box_height - re_height) / 2)
    #         # top, bottom, left, right = margin_height, margin_height, 0, 0
    #         # border_color = [255, 255, 255]
    #         # bordered_img = cv2.copyMakeBorder(re_image, top, bottom, left, right, cv2.BORDER_CONSTANT,
    #         #                                   value=border_color)
    #     print(f'box size:({box_width},{box_height})')
    #     print(f're_image size:({re_width},{re_height})')
    #     return re_image

    # import image
    def handle_import_image(self):
        path, _ = QFileDialog.getOpenFileName(
            self, '选择图片', '', '图片文件 (*.jpg *.png *.bmp)')
        if path:
            # 以opencv的格式读取图片
            self.image_path = path
            self.image_source_cv = cv2.imread(path)
            self.image_source_cv = cv2.cvtColor(self.image_source_cv, cv2.COLOR_BGR2RGB)
            im_shape = self.image_source_cv.shape
            self.image_size_source['width'] = im_shape[1]
            self.image_size_source['height'] = im_shape[0]

            self.image_resize_cv, self.scale_ratio = _resize_image(self.image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(self.image_resize_cv)
            # h, w, c = self.cv_image.shape
            # bytes_per_line = 3 * w
            # q_img = QImage(self.cv_image.data, w, h, bytes_per_line,
            #                QImage.Format_RGB888)
            self.image_resize_pixmap = QPixmap.fromImage(image_resize_qt)
            self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.update_interact_image()
            self.update_source_image()
            self.update_image_detail_box()
            self.update_statusBar(f"image path: {self.image_path}   |||   image size: ({self.image_size_source['width']}, {self.image_size_source['height']})")
            # self.label.setPixmap(self.current_pixmap)
            # self.points.clear()
            # self.point_selection_mode = False
            self.spin_src_x.setMaximum(self.image_size_source['width'] - 1)
            self.spin_src_y.setMaximum(self.image_size_source['height'] - 1)
            self.spin_dst_x.setMaximum(self.image_size_source['width'] - 1)
            self.spin_dst_y.setMaximum(self.image_size_source['height'] - 1)
        else:
            print('Path is invalid!')

    # image process
    def handle_btn_image_process(self):
        if self.image_source_cv is None:
            self.update_statusBar('no image to process', 2000)
            return
        if self.image_process_mode == 'gray':
            # source
            self.image_source_gray_cv = cv2.cvtColor(self.image_source_cv, cv2.COLOR_BGR2GRAY)
            print(type(self.image_source_gray_cv))
            self.image_source_gray_qt = _cv2qt_gray(self.image_source_gray_cv)
            self.map_grid_list = np.array(self.image_source_gray_cv.tolist(), dtype=np.uint32)
            self.map_dilate_list = self.map_grid_list
            # resize
            # self.image_resize_gray_cv, _ = _resize_image(self.image_source_gray_cv, self.image_box_size)
            # print(type(self.image_resize_gray_cv))
            # self.image_resize_gray_qt = _cv2qt_gray(self.image_resize_gray_cv)
            # self.image_resize_gray_pixmap = QPixmap.fromImage(self.image_resize_gray_qt)
            # self.image_current_pixmap = self.image_resize_gray_pixmap.copy()
            ############## matplotlib
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
            path = './map_grid.png'
            plt.savefig(path)
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_source_gray_pixmap = QPixmap.fromImage(image_resize_qt)
            # self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.label_map_grid.setPixmap(self.image_source_gray_pixmap)
            os.remove(path)
            ###############
            self.image_current_pixmap = self.image_source_gray_pixmap
            self.update_interact_image()
        elif self.image_process_mode == 'binary':
            # source
            self.image_source_gray_cv = cv2.cvtColor(self.image_source_cv, cv2.COLOR_BGR2GRAY)
            shape = self.image_source_gray_cv.shape
            for i in range(0, shape[0]):
                for j in range(0, shape[1]):
                    if self.image_source_gray_cv[i][j] > self.bin_thr:
                        self.image_source_gray_cv[i][j] = 255
                    else:
                        self.image_source_gray_cv[i][j] = 0
            # _, self.image_source_gray_cv = cv2.threshold(self.image_source_gray_cv, self.bin_thr, 255,
            #                                              cv2.THRESH_BINARY)
            self.image_source_gray_qt = _cv2qt_gray(self.image_source_gray_cv)
            self.map_grid_list = np.array(self.image_source_gray_cv.tolist(), dtype=np.uint32)
            print(type(self.map_grid_list[0][0]))
            self.map_dilate_list = self.map_grid_list
            # resize
            # self.image_resize_gray_cv, _ = _resize_image(self.image_source_gray_cv, self.image_box_size)
            # self.image_resize_gray_qt = _cv2qt_gray(self.image_resize_gray_cv)
            # self.image_resize_gray_pixmap = QPixmap.fromImage(self.image_resize_gray_qt)
            # self.image_current_pixmap = self.image_resize_gray_pixmap.copy()
            # self.update_interact_image()
            ############## matplotlib
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
            path = './map_grid.png'
            plt.savefig(path)
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_source_gray_pixmap = QPixmap.fromImage(image_resize_qt)
            # self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.label_map_grid.setPixmap(self.image_source_gray_pixmap)
            os.remove(path)
            ###############
            self.image_current_pixmap = self.image_source_gray_pixmap
            self.update_interact_image()
        else:
            self.update_statusBar('no image to process', 2000)

    # image process mode
    # select the process mode
    def handle_btn_gray(self):
        self.image_process_mode = 'gray'
        self.update_statusBar('set grad mode', 2000)

    def handle_btn_binary(self):
        self.image_process_mode = 'binary'
        self.update_statusBar('set binary mode', 2000)

    # set the minimum and maximum value of the binary threshold
    def handle_spin_bin_thr_min(self, value):
        self.bin_thr_min = value
        self.slider_bin_thr.setMinimum(value)
        self.update_statusBar(f'set binary threshold min: {value}', 2000)

    def handle_spin_bin_thr_max(self, value):
        self.bin_thr_max = value
        self.slider_bin_thr.setMaximum(value)
        self.update_statusBar(f'set binary threshold max: {value}', 2000)

    # set the binary value
    def handle_spin_bin_thr(self, value):
        self.bin_thr = value
        self.slider_bin_thr.setValue(value)
        self.update_statusBar(f'set binary threshold: {value}', 2000)

    def handle_slider_bin_thr(self, value):
        self.bin_thr = value
        self.spin_bin_thr.setValue(value)
        self.update_statusBar(f'set binary threshold: {value}', 2000)

    # map process
    # dilate process
    def handle_btn_dilate(self):
        if self.image_source_gray_cv is None:
            self.update_statusBar('no image to process', 2000)
            return
        else:
            # resize
            kernel_1 = np.ones((int(self.dilate_radius * self.scale_ratio), int(self.dilate_radius * self.scale_ratio)), dtype=np.uint8)
            kernel_2 = np.ones((self.dilate_radius, self.dilate_radius), dtype=np.uint8)
            # print(kernel_1.shape)
            # self.image_resize_dilate_cv = cv2.dilate(self.image_resize_gray_cv, kernel_1, iterations=self.dilate_iterations)
            # self.image_resize_dilate_qt = _cv2qt_gray(self.image_resize_dilate_cv)
            # self.image_resize_dilate_pixmap = QPixmap.fromImage(self.image_resize_dilate_qt)
            # self.image_current_pixmap = self.image_resize_dilate_pixmap.copy()
            # self.update_interact_image()
            # source
            self.image_source_dilate_cv = cv2.dilate(self.image_source_gray_cv, kernel_2, iterations=self.dilate_iterations)
            self.image_source_dilate_qt = _cv2qt_gray(self.image_source_dilate_cv)
            self.map_dilate_list = np.array(self.image_source_dilate_cv, dtype=np.uint32)
            # resize
            # self.image_resize_dilate_cv, _ = _resize_image(self.image_source_dilate_cv, self.image_box_size)
            # self.image_resize_dilate_qt = _cv2qt_gray(self.image_resize_dilate_cv)
            # self.image_resize_dilate_pixmap = QPixmap.fromImage(self.image_resize_dilate_qt)
            # self.image_tab.setCurrentIndex(3)
            # self.image_current_pixmap = self.image_resize_dilate_pixmap.copy()
            # self.update_interact_image()
            #################################
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_dilate_list, cmap=cmap, interpolation='nearest')
            path = './map_dilate.png'
            plt.savefig(path)
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_source_dilate_pixmap = QPixmap.fromImage(image_resize_qt)
            self.label_map_dilate.setPixmap(self.image_source_dilate_pixmap)
            os.remove(path)
            ########################
            self.image_current_pixmap = self.image_source_dilate_pixmap
            self.update_interact_image()

    # 黑白反转
    def handle_btn_inverse(self):
        if self.image_source_gray_cv is None:
            self.update_statusBar('no image to process', 2000)
            return
        else:
            # # resize
            # self.image_resize_gray_cv = 255 - self.image_resize_gray_cv
            # self.image_resize_gray_qt = _cv2qt_gray(self.image_resize_gray_cv)
            # self.image_resize_gray_pixmap = QPixmap.fromImage(self.image_resize_gray_qt)
            # self.image_current_pixmap = self.image_resize_gray_pixmap.copy()
            # self.update_interact_image()
            # source
            self.image_source_gray_cv = 255 - self.image_source_gray_cv
            self.image_source_gray_qt = _cv2qt_gray(self.image_source_gray_cv)
            self.map_grid_list = np.array(self.image_source_gray_cv, dtype=np.uint32)
            self.map_dilate_list = self.map_grid_list
            # # resize
            # self.image_resize_gray_cv, _ = _resize_image(self.image_source_gray_cv, self.image_box_size)
            # self.image_resize_gray_qt = _cv2qt_gray(self.image_resize_gray_cv)
            # self.image_resize_gray_pixmap = QPixmap.fromImage(self.image_resize_gray_qt)
            # self.image_current_pixmap = self.image_resize_gray_pixmap.copy()
            # self.update_interact_image()
            ############## matplotlib
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
            path = './map_grid.png'
            plt.savefig(path)
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_source_gray_pixmap = QPixmap.fromImage(image_resize_qt)
            # self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.label_map_grid.setPixmap(self.image_source_gray_pixmap)
            os.remove(path)
            ###############
            self.image_current_pixmap = self.image_source_gray_pixmap
            self.update_interact_image()

    # set dilate parameter
    def handle_spin_dilate_radius(self, value):
        self.dilate_radius = value
        self.update_statusBar(f'set dilate radius: {value}', 2000)

    def handle_spin_dilate_iterations(self, value):
        self.dilate_iterations = value
        self.update_statusBar(f'set dilate iterations: {value}', 2000)

    # set start point
    def handle_spin_src_x(self, value):
        self.src_point['x'] = value
    def handle_spin_src_y(self, value):
        self.src_point['y'] = value
    # plan to use this function to handle graphical interaction, but now just update the spin value
    def handle_btn_set_src(self):
        self.src_point['x'] = self.spin_src_x.value()
        self.src_point['y'] = self.spin_src_y.value()
        self.update_statusBar(f'Start: ({self.src_point['x']}, {self.src_point['y']})')
    # set end point
    def handle_spin_dst_x(self, value):
        self.dst_point['x'] = value

    def handle_spin_dst_y(self, value):
        self.dst_point['y'] = value
    # plan to use this function to handle graphical interaction, but now just update the spin value
    def handle_btn_set_dst(self):
        self.dst_point['x'] = self.spin_dst_x.value()
        self.dst_point['y'] = self.spin_dst_y.value()
        self.update_statusBar(f'Target: ({self.dst_point['x']}, {self.dst_point['y']})')

    # # set search parameter
    # def handle_btn_set_search_param(self):
    #     print('handle_btn_set_search_param')
    #     pass

    def handle_btn_start_search(self):
        if self.map_dilate_list is None:
            self.update_statusBar("map is null")
            return
        self.open_area, self.closed_area, self.search_path  = None, None, None
        start_time = time.time()
        start = [self.src_point['y'], self.src_point['x']]
        end = [self.dst_point['y'], self.dst_point['x']]
        print(type(self.map_grid_list[0][0]))
        self.map_dilate_list = self.map_dilate_list + 1
        ret_val = a_star_search(
            start,
            end,
            self.map_dilate_list,
            self.unreachable_thr,
            self.w_g,
            self.w_h,
            self.distance_method,
            self.search_method
        )
        end_time = time.time()
        self.search_time = end_time - start_time
        self.update_statusBar(f"A*算法执行时间: {self.search_time} 秒")
        if ret_val is None:
            self.update_statusBar('fail to search')
            return
        self.open_area, self.closed_area, self.search_path = ret_val
        print(len(self.search_path))
        # print('handle_btn_start_search')
        for i in self.search_path:
            temp = i[0]
            i[0] = i[1]
            i[1] = temp
        ################################
        if self.search_path is None:
            self.update_statusBar('search path is null!')
            return
        fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
        cmap = plt.get_cmap('YlGnBu')
        ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
        cmap = plt.get_cmap('summer')
        masked1 = np.ma.masked_where(self.open_area == 0, self.open_area)
        ax.imshow(masked1, cmap=cmap, interpolation='nearest', alpha=0.5)
        path_x, path_y = zip(*self.search_path)
        ax.plot(path_x, path_y, color='blue', linestyle='--', linewidth=1)
        ax.plot(self.src_point['x'], self.src_point['y'], color='blue', marker='o', markersize=10)
        ax.plot(self.dst_point['x'], self.dst_point['y'], color='green', marker='*', markersize=20)
        path = './map_search.png'
        plt.savefig(path)
        # plt.show()
        image_source_cv = cv2.imread(path)
        image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

        image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
        image_resize_qt = _cv2qt_rgb(image_resize_cv)
        self.image_search_pixmap = QPixmap.fromImage(image_resize_qt)
        # self.image_current_pixmap = self.image_resize_pixmap.copy()
        self.label_map_search.setPixmap(self.image_search_pixmap)
        os.remove(path)
        ###################
        self.image_current_pixmap = self.image_search_pixmap
        self.update_interact_image()

    def handle_spin_unreachable_threshold(self, value:int):
        self.unreachable_thr = value
        self.update_statusBar(f'set unreachable threshold: {self.unreachable_thr}', 2000)

    def handle_spin_weight_g(self, value):
        self.w_g = value
        self.update_statusBar(f'set weight g: {self.w_g:.2f}', 2000)

    def handle_spin_weight_h(self, value):
        self.w_h = value
        self.update_statusBar(f'set weight h: {self.w_h:.2f}', 2000)

    def handle_combo_distance_method(self, index:int):
        if index == 0:
            self.distance_method = 'euclidean'
            self.update_statusBar(f'set distance method: {self.distance_method}', 2000)
        elif index == 1:
            self.distance_method = 'diagonal'
            self.update_statusBar(f'set distance method: {self.distance_method}', 2000)
        elif index == 2:
            self.distance_method = 'manhattan'
            self.update_statusBar(f'set distance method: {self.distance_method}', 2000)
        else:
            self.update_statusBar(f'unknown distance method: {index}', 2000)

    def handle_combo_search_method(self, index:int):
        if index == 0:
            self.search_method = 'eight'
            self.update_statusBar(f'set search method: {self.search_method}', 2000)
        elif index == 1:
            self.search_method = 'four'
            self.update_statusBar(f'set search method: {self.search_method}', 2000)
        else:
            self.update_statusBar(f'unknown search method: {index}', 2000)

    # set optimal parameters
    # def handle_btn_set_optimal_param(self):
    #     pass
    def handle_btn_smooth_path(self):
        if self.search_path is None:
            self.update_statusBar('search path is null!')
            return
        points = np.array(self.search_path)
        p_shape = points.shape
        v_num = p_shape[0]
        P = make_matrix_P(v_num, 1.0, 1.0, 1.0)
        Q = make_matrix_Q(points, v_num)
        A = make_matrix_A(points, v_num)
        R = np.inf
        R = 2
        l = make_matrix_l(points, v_num, R)
        u = make_matrix_u(points, v_num, R)
        prob = osqp.OSQP()
        prob.setup(P, Q, A, l, u, alpha=1.0)
        res = prob.solve()
        result = res.x
        result_x = result[0:v_num]
        result_y = result[v_num:]
        self.smooth_result['x'] = result_x
        self.smooth_result['y'] = result_y
        #####################################
        if self.smooth_result['x'] is None:
            self.update_statusBar('optimal path is null!')
            return
        fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
        cmap = plt.get_cmap('YlGnBu')
        ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
        cmap = plt.get_cmap('summer')
        masked1 = np.ma.masked_where(self.open_area == 0, self.open_area)
        ax.imshow(masked1, cmap=cmap, interpolation='nearest', alpha=0.5)
        path_x, path_y = zip(*self.search_path)
        ax.plot(path_x, path_y, color='blue', linestyle='--', linewidth=1)
        ax.plot(self.smooth_result['x'], self.smooth_result['y'], color='red', linestyle='-', linewidth=2)
        ax.plot(self.src_point['x'], self.src_point['y'], color='blue', marker='o', markersize=10)
        ax.plot(self.dst_point['x'], self.dst_point['y'], color='green', marker='*', markersize=20)
        path = './map_path_smooth.png'
        plt.savefig(path)
        # plt.show()
        image_source_cv = cv2.imread(path)
        image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

        image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
        image_resize_qt = _cv2qt_rgb(image_resize_cv)
        self.image_optimal_pixmap = QPixmap.fromImage(image_resize_qt)
        # self.image_current_pixmap = self.image_resize_pixmap.copy()
        self.label_smooth.setPixmap(self.image_optimal_pixmap)
        os.remove(path)
        #####################
        self.image_current_pixmap = self.image_optimal_pixmap
        self.update_interact_image()

    cost_wight_min = 0.0
    cost_weight_max = 10
    def handle_spin_weight_smooth(self, value):
        self.smooth_cost = value
        set_value = int(value * 10)
        self.slider_weight_smooth.setValue(set_value)
        pass
    def handle_slider_weight_smooth(self, value):
        self.smooth_cost = value
        set_value = float(value / 10)
        self.spin_weight_smooth.setValue(set_value)
        pass
    def handle_spin_weight_length(self, value):
        self.length_cost = value
        set_value = int(value * 10)
        self.slider_weight_length.setValue(set_value)
        pass
    def handle_slider_weight_length(self, value):
        self.length_cost = value
        set_value = float(value / 10)
        self.spin_weight_length.setValue(set_value)
        pass
    def handle_spin_weight_overlap(self, value):
        self.overlap_cost = value
        set_value = int(value * 10)
        self.slider_weight_overlap.setValue(set_value)
        pass
    def handle_slider_weight_overlap(self, value):
        self.overlap_cost = value
        set_value = float(value / 10)
        self.spin_weight_overlap.setValue(set_value)
        pass
    def handle_spin_position_constrain(self, value):
        self.position_constrain = value
        set_value = int(value * 10)
        self.slider_positionr_constrain.setValue(set_value)
    def handle_slider_position_constrain(self, value):
        self.position_constrain = value
        set_value = float(value / 10)
        self.spin_position_constrain.setValue(set_value)

    def handle_image_tab(self, index:int):
        print(f'handle_image_tab {index}')
        if index == 0:
            pass
        elif index == 1:
            pass
        elif index == 2:
            if self.map_grid_list is None:
                return
            else:
                fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
                cmap = plt.get_cmap('YlGnBu')
                ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
                path = './map_grid.png'
                plt.savefig(path)
                image_source_cv = cv2.imread(path)
                image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

                image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
                image_resize_qt = _cv2qt_rgb(image_resize_cv)
                self.image_source_gray_pixmap = QPixmap.fromImage(image_resize_qt)
                # self.image_current_pixmap = self.image_resize_pixmap.copy()
                self.label_map_grid.setPixmap(self.image_source_gray_pixmap)
                os.remove(path)
        elif index == 3:
            if self.map_dilate_list is None:
                return
            else:
                fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
                cmap = plt.get_cmap('YlGnBu')
                ax.imshow(self.map_dilate_list, cmap=cmap, interpolation='nearest')
                path = './map_dilate.png'
                plt.savefig(path)
                image_source_cv = cv2.imread(path)
                image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

                image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
                image_resize_qt = _cv2qt_rgb(image_resize_cv)
                self.image_source_dilate_pixmap = QPixmap.fromImage(image_resize_qt)
                # self.image_current_pixmap = self.image_resize_pixmap.copy()
                self.label_map_dilate.setPixmap(self.image_source_dilate_pixmap)
                os.remove(path)
        elif index == 4:
            if self.search_path is None:
                self.update_statusBar('search path is null!')
                return
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
            cmap = plt.get_cmap('summer')
            masked1 = np.ma.masked_where(self.open_area == 0, self.open_area)
            ax.imshow(masked1, cmap=cmap, interpolation='nearest', alpha=0.5)
            path_x, path_y = zip(*self.search_path)
            ax.plot(path_x, path_y, color='blue', linestyle='--', linewidth=1)
            ax.plot(self.src_point['x'], self.src_point['y'], color='blue', marker='o', markersize=10)
            ax.plot(self.dst_point['x'], self.dst_point['y'], color='green', marker='*', markersize=20)
            path = './map_search.png'
            plt.savefig(path)
            # plt.show()
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_search_pixmap = QPixmap.fromImage(image_resize_qt)
            # self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.label_map_search.setPixmap(self.image_search_pixmap)
            os.remove(path)

        elif index == 5:
            if self.smooth_result['x'] is None :
                self.update_statusBar('optimal path is null!')
                return
            fig, ax = plt.subplots(figsize=(7, 7), dpi=200)
            cmap = plt.get_cmap('YlGnBu')
            ax.imshow(self.map_grid_list, cmap=cmap, interpolation='nearest')
            cmap = plt.get_cmap('summer')
            masked1 = np.ma.masked_where(self.open_area == 0, self.open_area)
            ax.imshow(masked1, cmap=cmap, interpolation='nearest', alpha=0.5)
            path_x, path_y = zip(*self.search_path)
            ax.plot(path_x, path_y, color='blue', linestyle='--', linewidth=1)
            ax.plot(self.smooth_result['x'], self.smooth_result['y'], color='red', linestyle='-', linewidth=2)
            ax.plot(self.src_point['x'], self.src_point['y'], color='blue', marker='o', markersize=10)
            ax.plot(self.dst_point['x'], self.dst_point['y'], color='green', marker='*', markersize=20)
            path = './map_path_smooth.png'
            plt.savefig(path)
            # plt.show()
            image_source_cv = cv2.imread(path)
            image_source_cv = cv2.cvtColor(image_source_cv, cv2.COLOR_BGR2RGB)

            image_resize_cv, _ = _resize_image(image_source_cv, self.image_box_size)
            image_resize_qt = _cv2qt_rgb(image_resize_cv)
            self.image_optimal_pixmap = QPixmap.fromImage(image_resize_qt)
            # self.image_current_pixmap = self.image_resize_pixmap.copy()
            self.label_smooth.setPixmap(self.image_optimal_pixmap)
            os.remove(path)
        else:
            pass

if __name__ == '__main__':
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
    QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())